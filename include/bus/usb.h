#pragma once

#include <bus/pci.h>
#include <stdint.h>

typedef struct {
	int type;
	pci_t * pci;
	void * mmio;
	int caplen;
} usb_controller_t;

typedef struct ehci_iso_transfer {
	uint32_t next_phy;
	uint32_t token[8];
	uint32_t buffer[7];
	uint32_t ext_buffer[7];
	uint32_t this;
	struct ehci_iso_transfer * next;
	struct ehci_iso_transfer * back;
	uint32_t last;
	uint32_t padding[5];
} ehci_iso_transfer_t;

typedef struct ehci_siso_transfer {
	uint32_t next_phy;
	uint8_t port;
	uint8_t hub;
	uint8_t endpoint;
	uint8_t device;
	uint16_t reserved;
	uint8_t cmask;
	uint8_t smask;
	uint16_t length;
	uint8_t cprogmask;
	uint8_t status;
	uint32_t buffer[2];
	uint32_t back_phy;
	uint32_t ext_buffer[2];
	uint32_t this;
	struct ehci_siso_transfer * next;
	struct ehci_siso_transfer * back;
	uint32_t size;
	void * log;
	uint32_t padding[2];
} __attribute__((packed)) ehci_siso_transfer_t;

typedef struct ehci_queue_overlay {
	uint32_t next_phy;
	uint32_t endpoint_chars;
	uint32_t endpoint_caps;
	uint32_t current;
} ehci_queue_overlay_t;

typedef struct ehci_queue_head {
	uint32_t next_phy;
	uint32_t endpoint_chars;
	uint32_t endpoint_caps;
	uint32_t current;
} ehci_queue_head_t;

enum {
	USB_CONTROLLER_UHCI,
	USB_CONTROLLER_OHCI,
	USB_CONTROLLER_EHCI,
	USB_CONTROLLER_XHCI,
	USB_CONTROLLER_UNSPECIFIED,
	USB_CONTROLLER_DEVICE, // how fuck this works???
};

enum {
	EHCI_REG_CAPLEN      = 0x00,
	EHCI_REG_RESERVED    = 0x01,
	EHCI_REG_HCI_VERSION = 0x02,
	EHCI_REG_STRUCTURE   = 0x04,
	EHCI_REG_CAPS        = 0x08,
	EHCI_REG_ROUTES      = 0x0c,


	EHCI_REG_CMD             = 0x00,
	EHCI_REG_STATUS          = 0x04,
	EHCI_REG_IRQ             = 0x08,
	EHCI_REG_FRAME           = 0x0c,
	EHCI_REG_SEGMENT         = 0x10,
	EHCI_REG_FRAME_BASE      = 0x14,
	EHCI_REG_NEXT_ASYNC_LIST = 0x18,
	EHCI_REG_FLAGS           = 0x40,
	EHCI_REG_CONTROL         = 0x44,
};

enum {
	EHCI_CMD_RUN                 = 0b00000000000000000000000000000001,
	EHCI_CMD_RESET               = 0b00000000000000000000000000000010,
	EHCI_CMD_FRAME_LIST_SIZE     = 0b00000000000000000000000000001100,
	EHCI_CMD_PERIOD_SCHED_ENABLE = 0b00000000000000000000000000010000,
	EHCI_CMD_ASYNC_SCHED_ENABLE  = 0b00000000000000000000000000100000,
	EHCI_CMD_DOORBELL            = 0b00000000000000000000000001000000,
	EHCI_CMD_SOFT_RESET          = 0b00000000000000000000000010000000,
	EHCI_CMD_ASYNC_PARK_COUNT    = 0b00000000000000000000001100000000,
	EHCI_CMD_ASYNC_PARK_ENABLE   = 0b00000000000000000000100000000000,
	EHCI_CMD_MICRO_THRESHOLD     = 0b00000000111111110000000000000000,

	EHCI_STAT_TRANSFER_IRQ   = 0b00000000000000000000000000000001,
	EHCI_STAT_ERROR_IRQ      = 0b00000000000000000000000000000010,
	EHCI_STAT_PORT_CHANGE    = 0b00000000000000000000000000000100,
	EHCI_STAT_FRAME_ROLLOVER = 0b00000000000000000000000000001000,
	EHCI_STAT_SYSTEM_ERROR   = 0b00000000000000000000000000010000,
	EHCI_STAT_DOORBELL_IRQ   = 0b00000000000000000001000000000000,
	EHCI_STAT_HALTED         = 0b00000000000000000010000000000000,
	EHCI_STAT_RECLAIM        = 0b00000000000000000100000000000000,
	EHCI_STAT_PERIOD_SCHED   = 0b00000000000000001000000000000000,
	EHCI_STAT_ASYNC_SCHED    = 0b00000000000000010000000000000000,

	EHCI_IRQ_ENABLE_TRANSFER       = 0b00000000000000000000000000000001,
	EHCI_IRQ_ENABLE_ERROR          = 0b00000000000000000000000000000010,
	EHCI_IRQ_ENABLE_PORT_CHANGE    = 0b00000000000000000000000000000100,
	EHCI_IRQ_ENABLE_FRAME_ROLLOVER = 0b00000000000000000000000000001000,
	EHCI_IRQ_ENABLE_SYSTEM_ERROR   = 0b00000000000000000000000000010000,
	EHCI_IRQ_ENABLE_ASYNC_WARNING  = 0b00000000000000000000000000100000,

	EHCI_STRUCTURE_DOWNSTREAMS     = 0b00000000000000000000000000001111,
	EHCI_STRUCTURE_POWER_CTRL      = 0b00000000000000000000000000010000,
	EHCI_STRUCTURE_ROUTE_RULES     = 0b00000000000000000000000010000000,
	EHCI_STRUCTURE_PORTS_PER_CTRLR = 0b00000000000000000000111100000000,
	EHCI_STRUCTURE_CONTROLLERS     = 0b00000000000000001111000000000000,
	EHCI_STRUCTURE_INDICATORS      = 0b00000000000000010000000000000000,
};

#define USB_DMA 0x0002e800

extern int usb_enabled;

void usb_init();
