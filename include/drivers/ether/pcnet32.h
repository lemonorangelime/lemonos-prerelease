#pragma once

#include <stdint.h>
#include <bus/pci.h>
#include <net/net.h>

typedef struct {
	uint32_t address;
	uint16_t buffer_length;
	uint16_t status;
	uint32_t length;
	uint32_t reserved;
} __attribute__((packed)) pcnet32_recv_descriptor_t;

typedef struct {
	uint32_t address;
	uint16_t length;
	uint16_t status;
	uint32_t misc;
	uint32_t reserved;
} __attribute__((packed)) pcnet32_trans_descriptor_t;

typedef struct {
	uint16_t mode;
	uint16_t lengths;
	uint8_t mac[6];
	uint16_t reserved;
	uint64_t filter;
	uint32_t receive_descriptors;
	uint32_t transmit_descriptors;
} __attribute__((packed)) pcnet32_init_t;

enum {
	PCNET32_16_EEPROM = 0x00,
	PCNET32_16_RDP    = 0x10,
	PCNET32_16_RAP    = 0x12,
	PCNET32_16_RESET  = 0x14,
	PCNET32_16_BDP    = 0x16,

	PCNET32_32_EEPROM = 0x00,
	PCNET32_32_RDP    = 0x10,
	PCNET32_32_RAP    = 0x14,
	PCNET32_32_RESET  = 0x18,
	PCNET32_32_BDP    = 0x1c,

	PCNET32_CSR0 = 0,
	PCNET32_CSR1 = 1,
	PCNET32_CSR2 = 2,
	PCNET32_CSR3 = 3,
	PCNET32_CSR4 = 4,
	PCNET32_CSR5 = 5,

	PCNET32_CSR8 = 8,
	PCNET32_CSR9 = 9,
	PCNET32_CSR10 = 10,
	PCNET32_CSR11 = 11,

	PCNET32_CSR12 = 12,
	PCNET32_CSR13 = 13,
	PCNET32_CSR14 = 14,
	PCNET32_CSR15 = 15,

	PCNET32_CSR58 = 58,

	PCNET32_CSR_STATUS   = 0, // human readable names
	PCNET32_CSR_INTMASK  = 3,
	PCNET32_CSR_FEATURES = 4,
	PCNET32_CSR_MODE     = 15,
	PCNET32_CSR_STYLE    = 58,

	PCNET32_BCR_STYLE = 20,

	PCNET32_STYLE_ISA = 0,
	PCNET32_STYLE_OLD = 1,
	PCNET32_STYLE_32  = 2,

	PCNET32_STATUS_START_INIT      = 0b0000000000000001,
	PCNET32_STATUS_START_CARD      = 0b0000000000000010,
	PCNET32_STATUS_STOP_CARD       = 0b0000000000000100,
	PCNET32_STATUS_DEMAND          = 0b0000000000001000,
	PCNET32_STATUS_ENABLE_TRANSMIT = 0b0000000000010000,
	PCNET32_STATUS_ENABLE_RECEIVE  = 0b0000000000100000,
	PCNET32_STATUS_ENABLE_IRQ      = 0b0000000001000000,
	PCNET32_STATUS_IRQ_FLAG        = 0b0000000010000000,
	PCNET32_STATUS_INIT_DONE       = 0b0000000100000000,
	PCNET32_STATUS_TRANSMIT_DONE   = 0b0000001000000000,
	PCNET32_STATUS_RECEIVE_DONE    = 0b0000010000000000,
	PCNET32_STATUS_MEMORY_ERROR    = 0b0000100000000000,
	PCNET32_STATUS_DROPPED_FRAME   = 0b0001000000000000,
	PCNET32_STATUS_COLLISION       = 0b0010000000000000,
	PCNET32_STATUS_BABBLE          = 0b0100000000000000,
	PCNET32_STATUS_ERROR           = 0b1000000000000000,

	PCNET32_MODE_DISABLE_RECEIVE   = 0b0000000000000001,
	PCNET32_MODE_DISABLE_TRANSMIT  = 0b0000000000000010,
	PCNET32_MODE_ENABLE_LOOPBACK   = 0b0000000000000100,
	PCNET32_MODE_DISABLE_CRC       = 0b0000000000001000,
	PCNET32_MODE_FORCE_COLLISIONS  = 0b0000000000010000,
	PCNET32_MODE_DISABLE_REPLAY    = 0b0000000000100000,
	PCNET32_MODE_INTERNAL_LOOPBACK = 0b0000000001000000,
	PCNET32_MODE_PORT_SELECT0      = 0b0000000010000000,
	PCNET32_MODE_PORT_SELECT1      = 0b0000000100000000,
	PCNET32_MODE_TRANSMIT_MODE     = 0b0000001000000000,
	PCNET32_MODE_MENDEC_LOOPBACK   = 0b0000010000000000,
	PCNET32_MODE_DISABLE_PARITY    = 0b0000100000000000,
	PCNET32_MODE_DISABLE_STATUS    = 0b0001000000000000,
	PCNET32_MODE_DISABLE_PHYISCALS = 0b0010000000000000,
	PCNET32_MODE_DISABLE_BROADCAST = 0b0100000000000000,
	PCNET32_MODE_ENABLE_MONITOR    = 0b1000000000000000,

	PCNET32_FEATURES_JABBER_ERROR_MASK  = 0b0000000000000001,
	PCNET32_FEATURES_JABBER_ERROR_STAT  = 0b0000000000000010,
	PCNET32_FEATURES_TRANSMISSION_IRQ   = 0b0000000000000100,
	PCNET32_FEATURES_TRANSMISSION_STAT  = 0b0000000000001000,
	PCNET32_FEATURES_RFCCOM             = 0b0000000000010000,
	PCNET32_FEATURES_RFCCOS             = 0b0000000000100000,
	PCNET32_FEATURES_DFCOM              = 0b0000000010000000,
	PCNET32_FEATURES_DFCO_IRQ           = 0b0000000100000000,
	PCNET32_FEATURES_AUTO_STRIP         = 0b0000010000000000,
	PCNET32_FEATURES_AUTO_PAD           = 0b0000100000000000,
	PCNET32_FEATURES_DISABLE_POLL       = 0b0001000000000000,
	PCNET32_FEATURES_ENABLE_TIMER       = 0b0010000000000000,
	PCNET32_FEATURES_DISABLE_BUST_COUNT = 0b0100000000000000,
	PCNET32_FEATURES_ENABLE_TEST_MODE   = 0b1000000000000000,

	PCNET32_INTMASK_BIG_ENDIAN_MODE   = 0b0000000000000100,
	PCNET32_INTMASK_INIT_IRQ          = 0b0000000100000000,
	PCNET32_INTMASK_TRANSMISSION_IRQ  = 0b0000001000000000,
	PCNET32_INTMASK_RECEIVE_IRQ       = 0b0000010000000000,
	PCNET32_INTMASK_MEMORY_ERROR_IRQ  = 0b0000100000000000,
	PCNET32_INTMASK_DROPPED_FRAME_IRQ = 0b0001000000000000,
	PCNET32_INTMASK_BABBLE_IRQ        = 0b0100000000000000,

	PCNET32_US  = 0,
	PCNET32_NIC = 1,
};

#define PCNET32_RECV_DESCRIPTORS 0x1e800
#define PCNET32_TRANSMIT_DESCRIPTORS 0x1ea00

#define PCNET32_RECV 0x1ea80
#define PCNET32_TRANSMIT 0x2a880

#define PCNET32_INIT 0x2d800

void pcnet32_outw(uint16_t reg, uint16_t data);
void pcnet32_outd(uint16_t reg, uint16_t data);
uint16_t pcnet32_inw(uint16_t reg);
uint32_t pcnet32_ind(uint16_t reg);
void pcnet32_write32_rap(uint32_t data);
void pcnet32_write16_rap(uint16_t data);
void pcnet32_write32_rdp(uint32_t data);
void pcnet32_write16_rdp(uint16_t data);
uint32_t pcnet32_read32_rdp();
uint16_t pcnet32_read16_rdp();
void pcnet32_write32_csr(uint16_t csr, uint32_t data);
void pcnet32_write16_csr(uint16_t csr, uint16_t data);
uint32_t pcnet32_read32_csr(uint16_t csr);
uint16_t pcnet32_read16_csr(uint16_t csr);
void pcnet32_send_packet(void * packet, size_t size);
void pcnet32_callback();
void pcnet32_enable();
void pcnet32_disable();
int pcnet32_reset(pci_t * pci);
int pcnet32_check(pci_t * pci);
void pcnet32_send(interface_t * interface, void * packet, size_t size);
uint8_t pcnet32_decode_mode(int mode);
int pcnet32_setmode(int mode);
int pcnet32_ctrl(interface_t * interface, int cmd, uint32_t op);
uint64_t pcnet32_read_mac();
int pcnet32_setmac(uint64_t mac);
int pcnet32_dev_init(pci_t * pci);
void pcnet32_init();
